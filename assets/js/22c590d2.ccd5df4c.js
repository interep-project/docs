"use strict";(self.webpackChunkinterep_docs=self.webpackChunkinterep_docs||[]).push([[789],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=c(n),u=a,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?r.createElement(h,i(i({ref:t},l),{},{components:n})):r.createElement(h,i({ref:t},l))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2678:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:2},i="Semaphore proofs",p={unversionedId:"guides/generating-proofs",id:"guides/generating-proofs",title:"Semaphore proofs",description:"If you've read the guide on how to use the Interep groups you may now be wondering how you can allow users to create Semaphore proofs, and how to verify that these proofs are valid.",source:"@site/docs/guides/generating-proofs.md",sourceDirName:"guides",slug:"/guides/generating-proofs",permalink:"/guides/generating-proofs",editUrl:"https://github.com/interep-project/docs/edit/main/docs/guides/generating-proofs.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Interep groups",permalink:"/guides/interep-groups"},next:{title:"API",permalink:"/api"}},s={},c=[{value:"Semaphore identity",id:"semaphore-identity",level:2},{value:"Semaphore proof",id:"semaphore-proof",level:2},{value:"Onchain verification",id:"onchain-verification",level:2}],l={toc:c};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"semaphore-proofs"},"Semaphore proofs"),(0,a.kt)("p",null,"If you've read the guide on how to use the Interep groups you may now be wondering how you can allow users to create Semaphore proofs, and how to verify that these proofs are valid."),(0,a.kt)("p",null,"In this section, we will learn how to get all the parameters for creating valid Semaphore proofs and how to use the Interep contract to correctly verify them."),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Before going any further, if you are not familiar with Semaphore, read the ",(0,a.kt)("a",{parentName:"p",href:"https://semaphore.appliedzkp.org"},"official documentation"),"."))),(0,a.kt)("h2",{id:"semaphore-identity"},"Semaphore identity"),(0,a.kt)("p",null,"Since only a user belonging to an Interep group can create a valid proof, it is necessary for users to re-generate their Semaphore identity with ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/interep-project/interep.js/tree/main/packages/identity"},(0,a.kt)("inlineCode",{parentName:"a"},"@interep/identity")),"."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Get the Ethereum account signer from Metamask:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import detectEthereumProvider from "@metamask/detect-provider"\nimport { ethers } from "ethers"\n\nconst ethereumProvider = await detectEthereumProvider()\nconst provider = new ethers.providers.Web3Provider(ethereumProvider)\nconst signer = provider.getSigner()\n')),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Create the Semaphore identity:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import createIdentity from "@interep/identity"\n\nconst sign = (message) => signer.signMessage(message)\n\nconst identity = await createIdentity(sign, "Github")\n')),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"While the identity commitment can be public, the Semaphore identity must remain private, as it contains the parameters necessary to create Semaphore proofs."))),(0,a.kt)("h2",{id:"semaphore-proof"},"Semaphore proof"),(0,a.kt)("p",null,"Once users have generated their Semaphore identities, they can be used to create Semaphore proofs with ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/interep-project/interep.js/tree/main/packages/proof"},(0,a.kt)("inlineCode",{parentName:"a"},"@interep/proof")),"."),(0,a.kt)("p",null,"Creating Semaphore proofs also requires some zero-knowledge static files. In the future these files will be hosted on a server and made public, but for now you can use the ones used in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/appliedzkp/semaphore/tree/main/build/snark"},"Semaphore repository")," for testing."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import createProof from "@interep/proof"\n\nconst groupProvider = "github"\nconst groupName = "gold"\nconst externalNullifier = 1\nconst signal = "Hello World"\n\nconst snarkArtifacts = {\n    wasmFilePath: "./semaphore.wasm",\n    zkeyFilePath: "./semaphore.zkey"\n}\n\nconst { publicSignals, solidityProof } = await createProof(identity, groupProvider, groupName, externalNullifier, signal, snarkArtifacts)\n')),(0,a.kt)("h2",{id:"onchain-verification"},"Onchain verification"),(0,a.kt)("p",null,"Finally, you can verify Semaphore proofs and use the anonymous user signals in your app."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Check the Interep supported networks and contract addresses in the ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/interep-project/contracts"},"repository")," and create your contract:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},'import "./IInterep.sol";\n\ncontract MyContract {\n\n    IInterep interep;\n\n    constructor(address interepAddress) {\n        interep = IInterep(interepAddress);\n    }\n\n   function myFunction(\n        uint256 groupId,\n        string calldata signal,\n        uint256 nullifierHash,\n        uint256 externalNullifier,\n        uint256[8] calldata proof\n    ) public {\n        interep.verifyProof(groupId, signal, nullifierHash, externalNullifier, proof);\n\n        // Use the anonymous user signal here...\n    }\n}\n')),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Call your contract function passing Semaphore proofs:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import Interep from "./Interep.json" // Interep contract interface.\nimport { Contract, providers, Wallet } from "ethers"\n\nconst provider = new providers.JsonRpcProvider("https://kovan.infura.io/v3/<infura-api-key>")\nconst adminWallet = Wallet.fromMnemonic("<admin-mnemonic>").connect(provider)\nconst contract = new Contract("<interep-contract-address>", Interep.abi, adminWallet)\n\nawait contract.myFunction(groupId, signal, publicSignals.nullifierHash, publicSignals.externalNullifier, solidityProof)\n')),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Check the available Interep ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/interep-project/contracts#deployed-contracts"},"contract addresses")," and generate the Interep contract interface (ABI) running ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn compile")," in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/interep-project/contracts"},"repository"),"."))))}m.isMDXComponent=!0}}]);